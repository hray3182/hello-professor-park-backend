basePath: /api/v1
definitions:
  dtos.AvailableSpotsResponse:
    properties:
      available_spots:
        type: integer
      occupied_spots:
        type: integer
      total_capacity:
        type: integer
    type: object
  dtos.ErrorResponse:
    properties:
      details:
        example: Optional additional details
        type: string
      error:
        example: Detailed error message
        type: string
    type: object
  dtos.ErrorResponseWithRecord:
    properties:
      calculatedAmount:
        type: number
      entryTime:
        description: Assuming models.ParkingRecord.EntryTime is time.Time
        type: string
      error:
        type: string
      licensePlate:
        type: string
      parkingRecordID:
        type: integer
      paymentStatus:
        type: string
    type: object
  dtos.ImageAttachmentRateResponse:
    properties:
      attachment_rate:
        description: Value between 0.0 and 1.0
        type: number
      entries_with_image:
        type: integer
      total_entries:
        type: integer
    type: object
  dtos.ParkingPaymentPayload:
    properties:
      amountPaid:
        example: 50
        type: number
      paymentMethod:
        example: MobilePay
        type: string
      paymentReference:
        description: 可選，如果前端有來自支付閘道的參考ID或備註
        example: TXN_REF_123XYZ
        type: string
    required:
    - amountPaid
    - paymentMethod
    type: object
  dtos.ParkingRecordWithTransactionResponse:
    properties:
      actualDurationMinutes:
        description: ActualDurationMinutes 實際停車時長（分鐘）
        type: integer
      calculatedAmount:
        description: CalculatedAmount 應付停車費用
        type: number
      entryTime:
        description: EntryTime 進場時間
        type: string
      exitTime:
        description: ExitTime 出場時間，如果尚未出場則為 NULL
        type: string
      image:
        description: New fields
        type: string
      licensePlate:
        description: LicensePlate 車牌號碼 (通常來自 OCR)
        type: string
      paymentStatus:
        description: PaymentStatus 支付狀態：Pending, Paid, Refunded
        type: string
      recordID:
        description: RecordID 作為主鍵
        type: integer
      sensorEntryID:
        description: SensorEntryID 入場感應器記錄ID
        type: string
      sensorExitID:
        description: SensorExitID 出場感應器記錄ID
        type: string
      transaction:
        $ref: '#/definitions/models.Transaction'
      transactionID:
        description: TransactionID 關聯到 Transactions 表的外鍵，如果尚未支付或無交易則為 NULL
        type: integer
      userVerifiedLicensePlate:
        description: UserVerifiedLicensePlate 使用者驗證/修正後的車牌號碼，可以為 NULL
        type: string
    type: object
  dtos.SimpleEntryPayload:
    properties:
      licensePlate:
        example: ABC-1234
        type: string
    required:
    - licensePlate
    type: object
  dtos.SuccessResponse:
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  dtos.SuccessResponseWithData:
    properties:
      data: {}
      message:
        type: string
    type: object
  dtos.TotalParkingCountResponse:
    properties:
      total_count:
        type: integer
    type: object
  dtos.TotalRevenueResponse:
    properties:
      currency:
        description: e.g., "TWD", "USD"
        type: string
      total_revenue:
        type: number
    type: object
  dtos.VerifyLicensePlatePayload:
    properties:
      licensePlate:
        example: XYZ-7890
        type: string
    required:
    - licensePlate
    type: object
  models.ParkingRecord:
    properties:
      actualDurationMinutes:
        description: ActualDurationMinutes 實際停車時長（分鐘）
        type: integer
      calculatedAmount:
        description: CalculatedAmount 應付停車費用
        type: number
      entryTime:
        description: EntryTime 進場時間
        type: string
      exitTime:
        description: ExitTime 出場時間，如果尚未出場則為 NULL
        type: string
      image:
        description: New fields
        type: string
      licensePlate:
        description: LicensePlate 車牌號碼 (通常來自 OCR)
        type: string
      paymentStatus:
        description: PaymentStatus 支付狀態：Pending, Paid, Refunded
        type: string
      recordID:
        description: RecordID 作為主鍵
        type: integer
      sensorEntryID:
        description: SensorEntryID 入場感應器記錄ID
        type: string
      sensorExitID:
        description: SensorExitID 出場感應器記錄ID
        type: string
      transaction:
        allOf:
        - $ref: '#/definitions/models.Transaction'
        description: |-
          GORM 模型關聯定義
          Vehicle     Vehicle     `gorm:"foreignKey:VehicleID"` // 移除 Vehicle 關聯
      transactionID:
        description: TransactionID 關聯到 Transactions 表的外鍵，如果尚未支付或無交易則為 NULL
        type: integer
      userVerifiedLicensePlate:
        description: UserVerifiedLicensePlate 使用者驗證/修正後的車牌號碼，可以為 NULL
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        description: Amount 交易金額
        type: number
      parkingRecordID:
        description: ParkingRecordID 關聯到 ParkingRecords 表的外鍵
        type: integer
      paymentGatewayResponse:
        description: PaymentGatewayResponse 支付閘道回傳的詳細資訊 (JSON或TEXT)
        type: string
      paymentMethod:
        description: PaymentMethod 付款方式，例如 "CreditCard", "MobilePay", "Cash"
        type: string
      status:
        description: Status 交易狀態：Success, Failed, Refunded
        type: string
      transactionID:
        description: TransactionID 作為主鍵
        type: integer
      transactionTime:
        description: TransactionTime 交易時間
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API documentation for the Hello Professor parking management
    system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hello Professor API
  version: "1.0"
paths:
  /parking-records:
    get:
      description: Get a list of all parking records, with pagination
      parameters:
      - default: 10
        description: Limit number of parking records returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ParkingRecord'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get all parking records
      tags:
      - parking_records
    post:
      consumes:
      - application/json
      description: Add a new parking record to the system. This is a general endpoint,
        for specific entry/exit events, use /parking-records/entry and /parking-records/exit.
      parameters:
      - description: Parking Record Information
        in: body
        name: parking_record_info
        required: true
        schema:
          $ref: '#/definitions/models.ParkingRecord'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Create a new parking record
      tags:
      - parking_records
  /parking-records/{id}:
    delete:
      description: Remove a parking record from the system by its ID
      parameters:
      - description: Parking Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Delete a parking record by ID
      tags:
      - parking_records
    get:
      description: Get details of a parking record by its ID
      parameters:
      - description: Parking Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get a parking record by ID
      tags:
      - parking_records
    put:
      consumes:
      - application/json
      description: Update details of an existing parking record by its ID. Can be
        used for manual adjustments.
      parameters:
      - description: Parking Record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Parking Record Update Information
        in: body
        name: parking_record_update
        required: true
        schema:
          $ref: '#/definitions/models.ParkingRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Update an existing parking record
      tags:
      - parking_records
  /parking-records/{id}/pay:
    post:
      consumes:
      - application/json
      description: Marks a parking record as paid and ideally creates a transaction
        record.
      parameters:
      - description: Parking Record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payment Details
        in: body
        name: paymentPayload
        required: true
        schema:
          $ref: '#/definitions/dtos.ParkingPaymentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Payment successful
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ParkingRecordWithTransactionResponse'
              type: object
        "400":
          description: Invalid request (e.g., validation error, amount mismatch)
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "402":
          description: Payment required conditions not met (e.g., fee not calculated,
            already paid, vehicle exited)
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Parking record not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Pay for a parking record
      tags:
      - Parking Records
  /parking-records/{id}/prepare-payment:
    post:
      description: Calculates and stores the parking fee if not already calculated
        for an active parking record. Returns the record with payment details.
      parameters:
      - description: Parking Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully calculated/retrieved fee, record ready for payment
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Invalid Record ID or record already exited/paid
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Parking Record not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Prepare a parking record for payment by calculating/retrieving its
        fee
      tags:
      - parking_records
  /parking-records/{id}/verify-license-plate:
    patch:
      consumes:
      - application/json
      description: Allows a user to correct or verify the license plate for an existing
        parking record.
      parameters:
      - description: Parking Record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Verified License Plate Information
        in: body
        name: license_plate_info
        required: true
        schema:
          $ref: '#/definitions/dtos.VerifyLicensePlatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Update user-verified license plate for a parking record
      tags:
      - parking_records
  /parking-records/entry:
    post:
      consumes:
      - multipart/form-data
      description: Records when a vehicle enters the parking lot, accepting license
        plate and an optional image file.
      parameters:
      - description: Vehicle License Plate
        in: formData
        name: licensePlate
        required: true
        type: string
      - description: Optional image of the vehicle/license plate
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Record a vehicle entry event
      tags:
      - parking_records
  /parking-records/exit:
    post:
      consumes:
      - application/json
      description: Records when a vehicle exits the parking lot. Checks for payment
        status.
      parameters:
      - description: Vehicle Exit Information (License Plate Only)
        in: body
        name: exit_info
        required: true
        schema:
          $ref: '#/definitions/dtos.SimpleEntryPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/dtos.ErrorResponseWithRecord'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Record a vehicle exit event
      tags:
      - parking_records
  /parking-records/license/{licensePlate}:
    get:
      description: Get all parking records associated with a specific License Plate
      parameters:
      - description: License Plate
        in: path
        name: licensePlate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ParkingRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get parking records by License Plate
      tags:
      - parking_records
  /parking-records/license/{licensePlate}/latest:
    get:
      description: Get the most recent parking record for a specific License Plate
      parameters:
      - description: License Plate
        in: path
        name: licensePlate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.ParkingRecord'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get the latest parking record by License Plate
      tags:
      - parking_records
  /parking-records/search/license:
    get:
      description: Search all parking records by a partial or full License Plate (case-insensitive)
      parameters:
      - description: License Plate Query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ParkingRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Search parking records by License Plate (fuzzy search)
      tags:
      - parking_records
  /reports/operations/image-attachment-rate:
    get:
      description: Calculates the percentage of vehicle entries that have an associated
        image.
      parameters:
      - description: Start time for the report (RFC3339 format, e.g., 2023-01-01T00:00:00Z)
        in: query
        name: startTime
        type: string
      - description: End time for the report (RFC3339 format, e.g., 2023-01-31T23:59:59Z)
        in: query
        name: endTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ImageAttachmentRateResponse'
              type: object
        "400":
          description: Invalid time format
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get the rate of parking entries with images
      tags:
      - reports
  /reports/parking-lot/available-spots:
    get:
      description: Retrieves the total capacity, occupied spots, and available spots
        in the parking lot.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/dtos.AvailableSpotsResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get available parking spots
      tags:
      - reports
  /reports/revenue/total:
    get:
      description: Retrieves the total revenue collected from parking fees.
      parameters:
      - description: Start time for the report (RFC3339 format, e.g., 2023-01-01T00:00:00Z)
        in: query
        name: startTime
        type: string
      - description: End time for the report (RFC3339 format, e.g., 2023-01-31T23:59:59Z)
        in: query
        name: endTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/dtos.TotalRevenueResponse'
              type: object
        "400":
          description: Invalid time format
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get total revenue from parking fees within a time range
      tags:
      - reports
  /reports/traffic/total-count:
    get:
      description: Retrieves the total number of parking events (vehicle entries).
      parameters:
      - description: Start time for the report (RFC3339 format, e.g., 2023-01-01T00:00:00Z)
        in: query
        name: startTime
        type: string
      - description: End time for the report (RFC3339 format, e.g., 2023-01-31T23:59:59Z)
        in: query
        name: endTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseWithData'
            - properties:
                data:
                  $ref: '#/definitions/dtos.TotalParkingCountResponse'
              type: object
        "400":
          description: Invalid time format
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get total parking count within a time range
      tags:
      - reports
  /transactions:
    get:
      description: Get a list of all transactions, with pagination
      parameters:
      - default: 10
        description: Limit number of transactions returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get all transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Add a new transaction to the system
      parameters:
      - description: Transaction Information
        in: body
        name: transaction_info
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Create a new transaction
      tags:
      - transactions
  /transactions/{id}:
    delete:
      description: Remove a transaction from the system by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Delete a transaction by ID
      tags:
      - transactions
    get:
      description: Get details of a transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get a transaction by ID
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Update details of an existing transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction Update Information
        in: body
        name: transaction_update
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Update an existing transaction
      tags:
      - transactions
  /transactions/parking/{parkingRecordID}:
    get:
      description: Get all transactions associated with a specific ParkingRecord ID
      parameters:
      - description: Parking Record ID
        in: path
        name: parkingRecordID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get transactions by ParkingRecord ID
      tags:
      - transactions
schemes:
- http
- https
swagger: "2.0"
